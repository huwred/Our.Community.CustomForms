@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>
@using Umbraco.Cms.Core.PropertyEditors.ValueConverters;
@using Umbraco.Community.BlockPreview.Extensions
@using Our.Community.CustomForm.Extensions


@{

    // 1. Check if this block grid item has settings
    var hasSettings = Model?.Settings != null;
    // 2. If this block grid item has settings, get the Areas background colour
    var areasBackgroundColour = hasSettings ? Model.Settings.Value<ColorPickerValueConverter.PickedColor>("layoutAreasColourPicker") : null;
    // 3. Get the label from the colour
    var areasColorLabelValue = areasBackgroundColour?.Label;
    // 4. If the area has a colour, use it, otherwise use bg-light
    var areasColorLabel = areasColorLabelValue != null ? areasColorLabelValue : "bg-white";
    // 5. Set the TempData to use in the area
    ViewData["AreaBackgroundColors"] = areasColorLabel;

}

@await Html.GetPreviewBlockGridItemAreasHtmlAsync(Model,"form")

<!-- Initialise tinymce for any RichText fields (tinyMCE is included in Umbrac) -->
@Html.PartialViewScriptBlock(@<script type="text/javascript" src="/umbraco/lib/tinymce/tinymce.min.js" nonce="rAnd0m123"></script>)
@Html.PartialViewScriptBlock(@<script type="text/javascript" src="/js/customform.min.js" nonce="rAnd0m123"></script>)
@Html.PartialViewScriptBlock(@<script type="text/javascript" src="/scripts/captcha.js" nonce="rAnd0m123"></script>)
@Html.PartialViewScriptBlock(@<script>
                                  // disable form submissions if there are invalid fields
                                  (() => {
                                      'use strict';

                                      // Fetch all the forms we want to apply custom Bootstrap validation styles to
                                      const forms = document.querySelectorAll('.needs-validation');
                                      
                                      // Loop over them and prevent submission
                                      Array.from(forms).forEach(form => {
                                          form.addEventListener('submit',
                                              event => {
                                                  if (!form.checkValidity()) {
                                                      event.preventDefault();
                                                      event.stopPropagation();
                                                  }
                                                  form.classList.add('was-validated');
                                              },
                                              false);
                                      });
                                  })()
                              </script>)




